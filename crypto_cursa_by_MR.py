from tkinter import *
from tkinter import scrolledtext
import random



#kmzi-module-1.py
def fio_to_bin_DES(text_in):
    fio8 = ''
    for i in range(8):
        fio8 += text_in[i]
    fio8 = fio8.upper()
    ASCII_rus = [ ['А','11000000'], ['Б','11000001'], ['В','11000010'], 
                  ['Г','11000011'], ['Д','11000100'], ['Е','11000101'], 
                  ['Ж','11000110'], ['З','11000111'], ['И','11001000'], 
                  ['Й','11001001'], ['К','11001010'], ['Л','11001011'], 
                  ['М','11001100'], ['Н','11001101'], ['О','11001110'], 
                  ['П','11001111'], ['Р','11010000'], ['С','11010001'], 
                  ['Т','11010010'], ['У','11010011'], ['Ф','11010100'], 
                  ['Х','11010101'], ['Ц','11010110'], ['Ч','11010111'], 
                  ['Ш','11011000'], ['Щ','11011001'], ['Ъ','11011010'], 
                  ['Ы','11011011'], ['Ь','11011100'], ['Э','11011101'], 
                  ['Ю','11011110'], ['Я','11011111']  ]
    L0='' ; R0='' ; ii=''
    for q in range(8):
        for i in range(32):
            if fio8[q] == ASCII_rus[i][0]:
                ii += ASCII_rus[i][1]
                break
    L0 = ii[58-1]+ii[50-1]+ii[42-1]+ii[34-1]+ii[26-1]+ii[18-1]+ii[10-1]+ii[2-1]+ii[60-1]+ii[52-1]+ii[44-1]+ii[36-1]+ii[28-1]+ii[20-1]+ii[12-1]+ii[4-1]+ii[62-1]+ii[54-1]+ii[46-1]+ii[38-1]+ii[30-1]+ii[22-1]+ii[14-1]+ii[6-1]+ii[64-1]+ii[56-1]+ii[48-1]+ii[40-1]+ii[32-1]+ii[24-1]+ii[16-1]+ii[8-1]
    R0 = ii[57-1]+ii[49-1]+ii[41-1]+ii[33-1]+ii[25-1]+ii[17-1]+ii[9-1] +ii[1-1]+ii[59-1]+ii[51-1]+ii[43-1]+ii[35-1]+ii[27-1]+ii[19-1]+ii[11-1]+ii[3-1]+ii[61-1]+ii[53-1]+ii[45-1]+ii[37-1]+ii[29-1]+ii[21-1]+ii[13-1]+ii[5-1]+ii[63-1]+ii[55-1]+ii[47-1]+ii[39-1]+ii[31-1]+ii[23-1]+ii[15-1]+ii[7-1]
    return L0, R0
def EKS(R0,otec):
    E=''; E+= R0[32-1]+R0[1-1]+R0[2-1]+R0[3-1]+R0[4-1]+R0[5-1]+R0[4-1]+R0[5-1]+R0[6-1]+R0[7-1]+R0[8-1]+R0[9-1]+R0[8-1]+R0[9-1]+R0[10-1]+R0[11-1]+R0[12-1]+R0[13-1]+R0[12-1]+R0[13-1]+R0[14-1]+R0[15-1]+R0[16-1]+R0[17-1]+R0[16-1]+R0[17-1]+R0[18-1]+R0[19-1]+R0[20-1]+R0[21-1]+R0[20-1]+R0[21-1]+R0[22-1]+R0[23-1]+R0[24-1]+R0[25-1]+R0[24-1]+R0[25-1]+R0[26-1]+R0[27-1]+R0[28-1]+R0[29-1]+R0[28-1]+R0[29-1]+R0[30-1]+R0[31-1]+R0[32-1]+R0[1-1]
    K = DESKey(otec)
    S6 = ''
    for i in range(48):
        c = aXORb(E[i],K[i])
        S6 += c
    return S6
def DESKey(otec):
    otc=''
    for i in range(8):
        otc += otec[i]
    otc = otc.upper()
    ASCII_rus = [ ['А','11000000'], ['Б','11000001'], ['В','11000010'], 
                  ['Г','11000011'], ['Д','11000100'], ['Е','11000101'], 
                  ['Ж','11000110'], ['З','11000111'], ['И','11001000'], 
                  ['Й','11001001'], ['К','11001010'], ['Л','11001011'], 
                  ['М','11001100'], ['Н','11001101'], ['О','11001110'], 
                  ['П','11001111'], ['Р','11010000'], ['С','11010001'], 
                  ['Т','11010010'], ['У','11010011'], ['Ф','11010100'], 
                  ['Х','11010101'], ['Ц','11010110'], ['Ч','11010111'], 
                  ['Ш','11011000'], ['Щ','11011001'], ['Ъ','11011010'], 
                  ['Ы','11011011'], ['Ь','11011100'], ['Э','11011101'], 
                  ['Ю','11011110'], ['Я','11011111']  ]
    otv = ''
    for q in range(8):
        for i in range(32):
            if otc[q] == ASCII_rus[i][0]:
                otv += ASCII_rus[i][1]
                break
    otv = otv[0:7]+otv[8:15]+otv[16:23]+otv[24:31]+otv[32:39]+otv[40:47]+otv[48:55]+otv[56:63]
    otv = otv[0:7]+otv[8:15]+otv[16:23]+otv[24:31]+otv[32:39]+otv[40:47]+otv[48:54]
    return otv

def S6toS4(S6):
    s1=''+S6[0] +S6[1] +S6[2] +S6[3] +S6[4] +S6[5]
    s2=''+S6[6] +S6[7] +S6[8] +S6[9] +S6[10]+S6[11]
    s3=''+S6[12]+S6[13]+S6[14]+S6[15]+S6[16]+S6[17]
    s4=''+S6[18]+S6[19]+S6[20]+S6[21]+S6[22]+S6[23]
    s5=''+S6[24]+S6[25]+S6[26]+S6[27]+S6[28]+S6[29]
    s6=''+S6[30]+S6[31]+S6[32]+S6[33]+S6[34]+S6[35]
    s7=''+S6[36]+S6[37]+S6[38]+S6[39]+S6[40]+S6[41]
    s8=''+S6[42]+S6[43]+S6[44]+S6[45]+S6[46]+S6[47]
    s1=s1BOX(s1)
    s2=s2BOX(s2)
    s3=s3BOX(s3)
    s4=s4BOX(s4)
    s5=s5BOX(s5)
    s6=s6BOX(s6)
    s7=s7BOX(s7)
    s8=s8BOX(s8)
    S4 = '' ; S4 = s1+s2+s3+s4+s5+s6+s7+s8
    return S4
def s1BOX(s1):
    Y = int(s1[0])*2 + int(s1[5])
    X = int(s1[1])*8 + int(s1[2])*4 + int(s1[3])*2 + int(s1[4]) 
    box = [ [14,4,13,1,2,15,1,8,3,10,6,12,5,9,0,7],
            [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
            [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
            [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]  ]
    s1 = box[Y][X]
    s1 = "{0:b}".format(s1)
    while len(s1) != 4:
        s1 = '0'+s1
    return s1
def s2BOX(s2):
    Y = int(s2[0])*2 + int(s2[5]) 
    X = int(s2[1])*8 + int(s2[2])*4 + int(s2[3])*2 + int(s2[4]) 
    box = [ [ 15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
            [ 3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
            [ 0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
            [ 13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]  ]
    s2 = box[Y][X]
    s2 = "{0:b}".format(s2)
    while len(s2) != 4:
        s2 = '0'+s2
    return s2
def s3BOX(s3):
    Y = int(s3[0])*2 + int(s3[5]) 
    X = int(s3[1])*8 + int(s3[2])*4 + int(s3[3])*2 + int(s3[4]) 
    box = [ [ 10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
            [ 13,7,0,9,3,4,6,10,2,8,5,14,12,11,5,1],
            [ 13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
            [ 1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]  ]
    s3 = box[Y][X]
    s3 = "{0:b}".format(s3)
    while len(s3) != 4:
        s3 = '0'+s3
    return s3
def s4BOX(s4):
    Y = int(s4[0])*2 + int(s4[5])
    X = int(s4[1])*8 + int(s4[2])*4 + int(s4[3])*2 + int(s4[4]) 
    box = [ [ 7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
            [ 13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
            [ 10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,14],
            [ 3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,4]  ]
    s4 = box[Y][X]
    s4 = "{0:b}".format(s4)
    while len(s4) != 4:
        s4 = '0'+s4
    return s4
def s5BOX(s5):
    Y = int(s5[0])*2 + int(s5[5]) 
    X = int(s5[1])*8 + int(s5[2])*4 + int(s5[3])*2 + int(s5[4]) 
    box = [ [ 2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
            [ 14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
            [ 4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
            [ 11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]  ]
    s5 = box[Y][X]
    s5 = "{0:b}".format(s5)
    while len(s5) != 4:
        s5 = '0'+s5
    return s5
def s6BOX(s6):
    Y = int(s6[0])*2 + int(s6[5]) 
    X = int(s6[1])*8 + int(s6[2])*4 + int(s6[3])*2 + int(s6[4]) 
    box = [ [ 12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
            [ 10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
            [ 9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
            [ 4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]  ]
    s6 = box[Y][X]
    s6 = "{0:b}".format(s6)
    while len(s6) != 4:
        s6 = '0'+s6
    return s6
def s7BOX(s7):
    Y = int(s7[0])*2 + int(s7[5]) 
    X = int(s7[1])*8 + int(s7[2])*4 + int(s7[3])*2 + int(s7[4]) 
    box = [ [ 4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
            [ 13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
            [ 1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
            [ 6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]  ]
    s7 = box[Y][X]
    s7 = "{0:b}".format(s7)
    while len(s7) != 4:
        s7 = '0'+s7
    return s7
def s8BOX(s8):
    Y = int(s8[0])*2 + int(s8[5])
    X = int(s8[1])*8 + int(s8[2])*4 + int(s8[3])*2 + int(s8[4])
    box = [ [ 13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
            [ 1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [ 7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
            [ 2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]  ]
    s8 = box[Y][X]
    s8 = "{0:b}".format(s8) ; s8 = str(s8)
    while len(s8) != 4:
        s8 = '0'+s8
    return s8
def itogPER(L1,R1):
    itog = L1+R1
    itog1=''+itog[40-1]+itog[8-1]+itog[48-1]+itog[16-1]+itog[56-1]+itog[24-1]+itog[64-1]+itog[32-1]
    itog2=''+itog[39-1]+itog[7-1]+itog[47-1]+itog[15-1]+itog[55-1]+itog[23-1]+itog[63-1]+itog[31-1]
    itog3=''+itog[38-1]+itog[6-1]+itog[46-1]+itog[14-1]+itog[54-1]+itog[22-1]+itog[62-1]+itog[30-1]
    itog4=''+itog[37-1]+itog[5-1]+itog[45-1]+itog[13-1]+itog[53-1]+itog[21-1]+itog[61-1]+itog[29-1]
    itog5=''+itog[36-1]+itog[4-1]+itog[44-1]+itog[12-1]+itog[52-1]+itog[20-1]+itog[60-1]+itog[28-1]
    itog6=''+itog[35-1]+itog[3-1]+itog[43-1]+itog[11-1]+itog[51-1]+itog[19-1]+itog[59-1]+itog[27-1]
    itog7=''+itog[34-1]+itog[2-1]+itog[42-1]+itog[10-1]+itog[50-1]+itog[18-1]+itog[58-1]+itog[26-1]
    itog8=''+itog[33-1]+itog[1-1]+itog[41-1]+itog[9-1] +itog[49-1]+itog[17-1]+itog[57-1]+itog[25-1]
    itog14 = itog1+' '+itog2+' '+itog3+' '+itog4
    itog58 = itog5+' '+itog6+' '+itog7+' '+itog8
    return itog14, itog58
def DESfirst(text_in,otec):
    L0, R0 = fio_to_bin_DES(text_in)
    S6 = EKS(R0,otec)
    S4 = S6toS4(S6)
    P = S4[16-1]+S4[7-1]+S4[20-1]+S4[21-1]+S4[29-1]+S4[12-1]+S4[28-1]+S4[17-1]+S4[1-1]+S4[15-1]+S4[23-1]+S4[26-1]+S4[5-1]+S4[18-1]+S4[31-1]+S4[10-1]+S4[2-1]+S4[8-1]+S4[24-1]+S4[14-1]+S4[32-1]+S4[27-1]+S4[3-1]+S4[9-1]+S4[19-1]+S4[13-1]+S4[30-1]+S4[6-1]+S4[22-1]+S4[11-1]+S4[4-1]+S4[25-1]
    R1=''
    for i in range(32):
        c = aXORb(P[i],L0[i])
        R1+=c
    L1=R0
    return L1, R1
#================================================================
#================================================================
#================================================================
#================================================================
#kmzi-module-2.py
#ГОСТ 28148_89.py

def fio_to_bin(text_in):
    fio8 = ''
    for i in range(8):
        fio8 += text_in[i]
    fio8 = fio8.upper()
    ASCII_rus = [ ['А','11000000'], ['Б','11000001'], ['В','11000010'], 
                  ['Г','11000011'], ['Д','11000100'], ['Е','11000101'], 
                  ['Ж','11000110'], ['З','11000111'], ['И','11001000'], 
                  ['Й','11001001'], ['К','11001010'], ['Л','11001011'], 
                  ['М','11001100'], ['Н','11001101'], ['О','11001110'], 
                  ['П','11001111'], ['Р','11010000'], ['С','11010001'], 
                  ['Т','11010010'], ['У','11010011'], ['Ф','11010100'], 
                  ['Х','11010101'], ['Ц','11010110'], ['Ч','11010111'], 
                  ['Ш','11011000'], ['Щ','11011001'], ['Ъ','11011010'], 
                  ['Ы','11011011'], ['Ь','11011100'], ['Э','11011101'], 
                  ['Ю','11011110'], ['Я','11011111']  ]
    L0='' ; R0='' ; ii=''
    for q in range(8):
        for i in range(32):
            if fio8[q] == ASCII_rus[i][0]:
                ii += ASCII_rus[i][1]
                break
    for i in range(32):
        L0 += ii[i]
        R0 += ii[i+32]
    return L0, R0, fio8
def aXORb(a,b):
    if (a == '0' and b == '0') or (a == '1' and b == '1'):
        c = '0'
    else:
        c = '1'
    return c
def key_to_ascii(key):
    X=''
    for i in range(4):
        X+=key[i]
    X=X.upper()
    ASCII_rus = [ ['А','11000000'], ['Б','11000001'], ['В','11000010'], 
                  ['Г','11000011'], ['Д','11000100'], ['Е','11000101'], 
                  ['Ж','11000110'], ['З','11000111'], ['И','11001000'], 
                  ['Й','11001001'], ['К','11001010'], ['Л','11001011'], 
                  ['М','11001100'], ['Н','11001101'], ['О','11001110'], 
                  ['П','11001111'], ['Р','11010000'], ['С','11010001'], 
                  ['Т','11010010'], ['У','11010011'], ['Ф','11010100'], 
                  ['Х','11010101'], ['Ц','11010110'], ['Ч','11010111'], 
                  ['Ш','11011000'], ['Щ','11011001'], ['Ъ','11011010'], 
                  ['Ы','11011011'], ['Ь','11011100'], ['Э','11011101'], 
                  ['Ю','11011110'], ['Я','11011111']  ]
    X0=''
    for q in range(4):
        for i in range(32):
            if (X[q] == ASCII_rus[i][0]):
                X0+= ASCII_rus[i][1]
                break
            else:
                pass
    return X0, X
def GOST_28147_89(text_in,key):
    L0, R0, fio8 = fio_to_bin(text_in)
    X0, X = key_to_ascii(key)
    r0=str(R0)  ;  x0=str(X0)
    sum = bin(int(r0, 2) + int(x0, 2))
    if len(sum) > 32:
        sum=sum[-32:]
    BX8=''+sum[0:4]
    BX7=''+sum[4:8]
    BX6=''+sum[8:12]
    BX5=''+sum[12:16]
    BX4=''+sum[16:20]
    BX3=''+sum[20:24]
    BX2=''+sum[24:28]
    BX1=''+sum[28:32]
    BX8 = int(BX8[0])*8 + int(BX8[1])*4 + int(BX8[2])*2 + int(BX8[3])
    BX7 = int(BX7[0])*8 + int(BX7[1])*4 + int(BX7[2])*2 + int(BX7[3])
    BX6 = int(BX6[0])*8 + int(BX6[1])*4 + int(BX6[2])*2 + int(BX6[3])
    BX5 = int(BX5[0])*8 + int(BX5[1])*4 + int(BX5[2])*2 + int(BX5[3])
    BX4 = int(BX4[0])*8 + int(BX4[1])*4 + int(BX4[2])*2 + int(BX4[3])
    BX3 = int(BX3[0])*8 + int(BX3[1])*4 + int(BX3[2])*2 + int(BX3[3]) 
    BX2 = int(BX2[0])*8 + int(BX2[1])*4 + int(BX2[2])*2 + int(BX2[3])  
    BX1 = int(BX1[0])*8 + int(BX1[1])*4 + int(BX1[2])*2 + int(BX1[3])  
    box28147_89=[   [4,14,5,7,6,4,13,1],
                    [10,11,8,13,12,11,11,15],
                    [9,4,1,10,7,10,4,13],
                    [2,12,13,1,1,0,1,0],
                    [13,6,10,0,5,7,3,5],
                    [8,13,3,8,15,2,15,7],
                    [0,15,4,9,13,1,5,10],
                    [14,10,2,15,8,13,9,4],
                    [6,2,14,14,4,3,0,9],
                    [11,3,15,4,10,6,10,2],
                    [1,8,12,6,9,8,14,3],
                    [12,1,7,12,14,5,7,14],
                    [7,0,6,11,0,9,6,6],
                    [15,7,0,2,3,12,8,11],
                    [5,5,9,5,11,15,2,8],
                    [3,9,11,3,2,14,12,12]   ]
    BX8y=box28147_89[BX8][8-1]
    BX7y=box28147_89[BX7][7-1]
    BX6y=box28147_89[BX6][6-1]
    BX5y=box28147_89[BX5][5-1]
    BX4y=box28147_89[BX4][4-1]
    BX3y=box28147_89[BX3][3-1]
    BX2y=box28147_89[BX2][2-1]
    BX1y=box28147_89[BX1][1-1]

    BX8y="{0:b}".format(BX8y)
    while len(BX8y) != 4:
        BX8y = '0'+BX8y

    BX7y="{0:b}".format(BX7y)
    while len(BX7y) != 4:
        BX7y = '0'+BX7y

    BX6y="{0:b}".format(BX6y)
    while len(BX6y) != 4:
        BX6y = '0'+BX6y

    BX5y="{0:b}".format(BX5y)
    while len(BX5y) != 4:
        BX5y = '0'+BX5y

    BX4y="{0:b}".format(BX4y)
    while len(BX4y) != 4:
        BX4y = '0'+BX4y

    BX3y="{0:b}".format(BX3y)
    while len(BX3y) != 4:
        BX3y = '0'+BX3y

    BX2y="{0:b}".format(BX2y)
    while len(BX2y) != 4:
        BX2y = '0'+BX2y

    BX1y="{0:b}".format(BX1y)
    while len(BX1y) != 4:
        BX1y = '0'+BX1y

    P=BX8y+BX7y+BX6y+BX5y+BX4y+BX3y+BX2y+BX1y
    P1=''+P[0:11]
    P2=''+P[11:]
    P=P2+P1
    f=P
    R1 = ''
    for i in range(32):
        c = aXORb(f[i],L0[i])
        R1 += c

    L1=R0
    return L1, R1, fio8, X
#================================================================
#================================================================
#================================================================
#================================================================
#kmzi-module-3.py
#RSA.py
def dec_to_simp(n):
    Ans = []
    d = 2
    while d * d <= n:
        if n % d == 0:
            Ans.append(d)
            n //= d
        else:
            d += 1
    if n > 1:
        Ans.append(n)
    return Ans
def check_simp(d,phin):
    ans1 = dec_to_simp(d)
    ans2 = dec_to_simp(phin)
    for elem in ans1:
        if elem in ans2:
            ours=True
            break
        else:
            ours=False
    return ours
def findDENforN3(p,q):
    p=int(p);q=int(q)
    n = p*q
    phin = (p-1)*(q-1)
    simple_dec = [11,13,17,19,23,29,31,37,41,43,47,53,59,31,67,71,73,79,83,89,97,101,103,107,109,113,127,
    131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,
    269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,419,421,
    431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599]
    d = 999999; e=d ; ours=True
    while d>phin or e>phin or e==d or ours==True:
        ours = check_simp(d,phin)
        d = random.sample(simple_dec,1)
        d = d[0]
        otv = []
        for i in range(1000):
            e = (1 + phin*i)/d
            if e.is_integer():
                otv.append(i)
        k = random.sample(otv,1) ; k = k[0] 
        e = (1 + phin*k)/d
        simple_dec.remove(d)
        e=int(e)
    return d,e,n,k
def fio_to_dec(fio):
    fio = fio.upper()
    dec_rus = [ ['А','1'], ['Б','2'], ['В','3'], 
                  ['Г','4'], ['Д','5'], ['Е','6'], ['Ё','7'],
                  ['Ж','8'], ['З','9'], ['И','10'], 
                  ['Й','11'], ['К','12'], ['Л','13'], 
                  ['М','14'], ['Н','15'], ['О','16'], 
                  ['П','17'], ['Р','18'], ['С','19'], 
                  ['Т','20'], ['У','21'], ['Ф','22'], 
                  ['Х','23'], ['Ц','24'], ['Ч','25'], 
                  ['Ш','26'], ['Щ','27'], ['Ъ','28'], 
                  ['Ы','29'], ['Ь','30'], ['Э','31'], 
                  ['Ю','32'], ['Я','33']  ]
    C1=fio[0];C2=fio[1];C3=fio[2]
    for i in range(33):
        if C1 == dec_rus[i][0]:
            C1 = int(dec_rus[i][1])
            break
    for i in range(33):
        if C2 == dec_rus[i][0]:
            C2 = int(dec_rus[i][1])
            break
    for i in range(33):
        if C3 == dec_rus[i][0]:
            C3 = int(dec_rus[i][1])
            break
    return C1,C2,C3
def rsaFORfio(p,q,fio3):
    d,e,n,k = findDENforN3(p,q)
    C1,C2,C3 = fio_to_dec(fio3)
    C1 = (C1**e)%n  ;  C2 = (C2**e)%n  ;  C3 = (C3**e)%n
    M1= (C1**d)%n  ;  M2= (C2**d)%n  ;  M3= (C3**d)%n
    return C1,C2,C3,d,e,n,k,M1,M2,M3
#================================================================
#================================================================
#================================================================
#================================================================
def char_to_dec(char):
    char = char.upper()
    dec_rus = [ ['А','1'], ['Б','2'], ['В','3'], 
                  ['Г','4'], ['Д','5'], ['Е','6'], ['Ё','7'],
                  ['Ж','8'], ['З','9'], ['И','10'], 
                  ['Й','11'], ['К','12'], ['Л','13'], 
                  ['М','14'], ['Н','15'], ['О','16'], 
                  ['П','17'], ['Р','18'], ['С','19'], 
                  ['Т','20'], ['У','21'], ['Ф','22'], 
                  ['Х','23'], ['Ц','24'], ['Ч','25'], 
                  ['Ш','26'], ['Щ','27'], ['Ъ','28'], 
                  ['Ы','29'], ['Ь','30'], ['Э','31'], 
                  ['Ю','32'], ['Я','33']  ]
    for i in range(33):
        if char == dec_rus[i][0]:
            char = int(dec_rus[i][1])
            break
    return char
def fam_hash(p,q,fam,hash):
    p=int(p);q=int(q);hash=int(hash)
    n = q*p
    for i in range(len(fam)):
        char = fam[i]
        char = char_to_dec(char)
        hash=(hash+char)**2 % n
    return hash
#================================================================
#================================================================
#================================================================
#================================================================
def EDSrsa(p,q,m):
    d,e,n,k = findDENforN3(p,q)
    S = (m**d)%n  ;  H = (S**e)%n
    return H,m,d,e,n,k
#================================================================
#================================================================
#================================================================
#================================================================
def clicked():  
    otchet.delete('1.0', END)
    fio = txt.get()
    name = txt1.get()
    otec = txt2.get()
    vaszovut = 'Здравствуйте, {} {}!'.format(name,otec)
    otchet.insert(INSERT, vaszovut)
    textoo=otec ; vashtext = '\nДля создания ключа для заданий 1 и 2 будет \nиспользовано ваше отчество: '+'\n '+textoo  #textoo=txt3.get() ; vashtext = '\nВведенный текст: '+'\n '+textoo 
    otchet.insert(INSERT, vashtext)
    p3 = txt4.get() ; q3 = txt5.get()
    zadanie3 = '\nВы задали следующие параметры для N3: '+'\n'+'p = '+p3+'; q = '+q3
    p5 = txt6.get() ; q5 = txt7.get() ; hash = int(txt8.get())
    zadanie5 = '\nВы задали следующие параметры для N5: '+'\n'+'p = '+p5+'; q = '+q5+'; H0 =' +str(hash)
    otchet.insert(INSERT, zadanie3)
    otchet.insert(INSERT, zadanie5)
    #1
    text_in = fio+name
    otchet.insert(INSERT, '\n\n Задание №1 - DES')
    L1, R1 = DESfirst(text_in, otec)
    itog14,itog58 = itogPER(L1,R1)
    otvet1='\nДля заданных параметров: {} {} \nи ключа на основе отчества: {} \n  L1 = {}\n  R1 = {}\n\nРезультат после конечной перестановки:\n  {}\n  {}'.format(fio,name,otec,L1,R1,itog14,itog58)
    otchet.insert(INSERT, otvet1)
    #2
    key=textoo
    L1, R1, fio8, X = GOST_28147_89(text_in,key)
    otchet.insert(INSERT, '\n\n Задание №2 - ГОСТ 28147-89')
    otvet2 = '\nИспользуя  параметры "{}" и "{}"\nбыло вычислено, что:\n  L1 = {}\n  R1 = {}'.format(fio8,X,L1,R1)
    otchet.insert(INSERT, otvet2)
    #3
    otchet.insert(INSERT, '\n\n Задание №3 - RSA')
    fio3 = fio[0]+name[0]+otec[0]  ;  fio3 = fio3.upper()
    C1,C2,C3,d,e,n,k,M1,M2,M3 = rsaFORfio(int(p3),int(q3),fio3)
    otvet3 = '\nДля инициалов: "{}" \nИсходному сообщению ({},{},{}) \nсоответствует криптограмма ({},{},{}). \n\nОткрытый ключ: ({},{}). \nСекретный ключ: ({},{}). \n\n Сгенерировано при параметрах: \nd = {}; e = {}; n = {}; k = {}.'.format(fio3,M1,M2,M3,C1,C2,C3,e,n,d,n,d,e,n,k)
    otchet.insert(INSERT, otvet3)
    #4
    otchet.insert(INSERT, '\n\n Задание №4 - HASH')
    hash = fam_hash(p5,q5,fio,hash)
    otvet4 = '\nДля фамилии: {} - хеш будет равен: {}.'.format(fio,hash)
    otchet.insert(INSERT, otvet4)
    #5
    otchet.insert(INSERT, '\n\n Задание №5 - ЭЦП RSA')
    H,m,d,e,n,k = EDSrsa(p5,q5,hash)
    if H==m:
        otvet5 = '\nПроверка ключа по цифровой подписи.\n  Открытый ключ: ({},{})\n  Секретный ключ: ({},{})\nПроверка показала, что параметр Н ({}) равен\nпереданному хешу ({}) --> Подпись подлинная\n\n Сгенерировано при параметрах: \nd = {}; e = {}; n = {}; k = {}.'.format(e,n,d,n,H,m,d,e,n,k)
    else:
        otvet5 = '\nПроверка ключа по цифровой подписи.\n  Открытый ключ: ({},{})\n  Секретный ключ: ({},{})\nПроверка показала, что параметр Н ({}) не равен\nпереданному хешу ({}) --> Подпись ложная\n\n Сгенерировано при параметрах: \nd = {}; e = {}; n = {}; k = {}.'.format(e,n,d,n,H,m,d,e,n,k)
    otchet.insert(INSERT, otvet5)
#==============================
#==============================
window = Tk()
window.title("Курсовая работа по криптографии by M Ryabov")
window.geometry('900x450')
#==============================
#==============================
lbl = Label(window, text="Данные")
lbl.grid(column=0, row=0)
lbl2 = Label(window, text="Фамилия: ")
lbl2.grid(column=0, row=1)
lbl3 = Label(window, text="Имя: ")
lbl3.grid(column=0, row=2)
lbl4 = Label(window, text="Отчество: ")
lbl4.grid(column=0, row=3)
#lbl5 = Label(window, text="Текст: ")
#lbl5.grid(column=0, row=4)
txt = Entry(window,width=20)
txt.grid(column=1, row=1)
txt1 = Entry(window,width=20)
txt1.grid(column=1, row=2)
txt2 = Entry(window,width=20)
txt2.grid(column=1, row=3)
#txt3 = Entry(window,width=20) #
#txt3.grid(column=1, row=4)
#==============================
#==============================
lbl6 = Label(window, text="N3")
lbl6.grid(column=2, row=0)
lbl7 = Label(window, text="p =")
lbl7.grid(column=2, row=1)
lbl8 = Label(window, text="q =")
lbl8.grid(column=2, row=2)
#==============================
#==============================
txt4 = Entry(window,width=10)
txt4.grid(column=3, row=1)
txt5 = Entry(window,width=10)
txt5.grid(column=3, row=2)
btn = Button(window, text="Рассчитать!", command=clicked)
btn.grid(column=4,columnspan=2, row=4)
#==============================
#==============================
lbl9 = Label(window, text="N5")
lbl9.grid(column=4, row=0)
lbl10 = Label(window, text="p =")
lbl10.grid(column=4, row=1)
lbl11 = Label(window, text="q =")
lbl11.grid(column=4, row=2)
lbl12 = Label(window, text="H0 =")
lbl12.grid(column=4, row=3)
#==============================
#==============================
txt6 = Entry(window,width=10)
txt6.grid(column=5, row=1)
txt7 = Entry(window,width=10)
txt7.grid(column=5, row=2)
txt8 = Entry(window,width=10)
txt8.grid(column=5, row=3)
#==============================
#============================== 
otchet = scrolledtext.ScrolledText(window, width=49)
otchet.grid(column=6, row=1,rowspan=4)
#==============================
#==============================
window.mainloop()